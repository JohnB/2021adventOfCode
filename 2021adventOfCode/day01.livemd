<!-- vim: syntax=markdown -->

# Day 1

## Installation and Data

<!-- livebook:{"livebook_object":"cell_input","name":"Day of Advent:","type":"number","value":"1"} -->

<!-- livebook:{"livebook_object":"cell_input","name":"Part 1 Example: ","type":"textarea","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"Part 1 Puzzle Input: ","type":"textarea","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"Part 2 Example: ","type":"textarea","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"Part 2 Puzzle Input: ","type":"textarea","value":""} -->

```elixir
Mix.install([
  {:kino, "~> 0.3.1"}
])

IEx.Helpers.c("lib/advent_of_code.ex")

alias AdventOfCode, as: AOC
```

[2021 Day 1 Puzzle](https://adventofcode.com/2021/day/1)

## Part 1

<!-- livebook:{"livebook_object":"cell_input","name":"Part 1 Input Data","props":{"options":["example","puzzle input"]},"type":"select","value":"example"} -->

```elixir
alias AdventOfCode, as: AOC

defmodule Part1 do
  def solve(text) do
    data =
      text
      |> AdventOfCode.as_single_lines()
      |> Enum.map(&String.to_integer/1)

    Enum.each(data, fn entry ->
      other = 2020 - entry

      case other in data do
        true ->
          IO.puts("Solution: #{entry} * #{other} == #{entry * other}")
          true

        _ ->
          nil
      end
    end)
  end
end

Part1.solve(AOC.p1data())
```

## Part 2

<!-- livebook:{"livebook_object":"cell_input","name":"Part 2 Input Data","props":{"options":["example","puzzle input"]},"type":"select","value":"example"} -->

```elixir
alias AdventOfCode, as: AOC

defmodule Part2 do
  def solve_general_case(data, goal \\ 2020) do
    val =
      Enum.find(data, fn entry ->
        other = goal - entry

        case other in data do
          true ->
            # IO.puts("Solution: #{entry} * #{other} == #{entry * other}")
            true

          _ ->
            nil
        end
      end)

    case val do
      nil -> {nil, nil}
      value -> {value, goal - value}
    end
  end

  def solve(text) do
    data =
      text
      |> AdventOfCode.as_single_lines()
      |> Enum.map(&String.to_integer/1)

    Enum.find(data, fn entry ->
      other = 2020 - entry
      {a, b} = solve_general_case(data, other)
      a && b && IO.puts("Solution: #{a} * #{b} * #{entry} = #{a * b * entry}")
    end)
  end
end

Part2.solve(AOC.p2data())
```
