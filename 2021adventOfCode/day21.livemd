<!-- vim: syntax=markdown -->

# Day 21

## Installation and Data

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])

IEx.Helpers.c("lib/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_day = Kino.Input.number("Day")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

### part 1 title here

* Add part 1 puzzle instructions here

```elixir
defmodule Day21 do
  # Player 1 starting position: 4
  # Player 2 starting position: 7
  # use 0-based spaces and add 1 before scoring and display
  @start {{3, 0}, {6, 0}}

  # Insight, taking 3 numbers at a time means it increases by 9
  # each turn (except the start).
  def iterate(roll_number, {{_space1, score1}, {_space2, score2}} = acc) when score2 >= 1000 do
    IO.inspect([roll_number, acc], label: "DONE")
    result = (roll_number - 1) * 3 * score1
    IO.puts("Day21 part 1 solution: #{result}")
  end

  def iterate(roll_number, {{space1, score1}, {space2, score2}} = acc) do
    new_space = rem(space1 + 9 * roll_number - 3, 10)
    new_score = score1 + new_space + 1

    if roll_number < 10 || roll_number > 329 do
      IO.inspect([roll_number, {{space1 + 1, score1}, {space2 + 1, score2}}])
    end

    # swap front/back each iteration - they should go up roughly equally??
    iterate(roll_number + 1, {{space2, score2}, {new_space, new_score}})
  end

  def solve() do
    iterate(1, @start)
  end
end

Day21.solve()

# p1data.()
```

## Part 2 (maybe solved above)

* Add part 2 puzzle instructions here

```elixir
score = fn map ->
  map
  |> Map.values()
  |> Enum.reject(fn count -> count < 2 end)
  |> Enum.count()
end

AOC.p1data()
# 4873
|> score.()
```

### Epilogue

This LiveBook lives at https://github.com/JohnB/2021adventOfCode/blob/main/2021adventOfCode/day08.livemd

In an effort to "show my work", here are my searches that helped solve the puzzle.
Some are very basic.

* blah blah
  [ginger]()
