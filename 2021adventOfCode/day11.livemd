<!-- vim: syntax=markdown -->

# Day 11

## Installation and Data

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])

IEx.Helpers.c("lib/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_day = Kino.Input.number("Day")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

### Day 11: Dumbo Octopus ---

You enter a large cavern full of rare bioluminescent dumbo octopuses! They seem to not like the Christmas lights on your submarine, so you turn them off for now.

There are 100 octopuses arranged neatly in a 10 by 10 grid. Each octopus slowly gains energy over time and flashes brightly for a moment when its energy is full. Although your lights are off, maybe you could navigate through the cave without disturbing the octopuses if you could predict when the flashes of light will happen.

Each octopus has an energy level - your submarine can remotely measure the energy level of each octopus (your puzzle input). For example:

```
5483143223
2745854711
5264556173
6141336146
6357385478
4167524645
2176841721
6882881134
4846848554
5283751526
```

The energy level of each octopus is a value between 0 and 9. Here, the top-left octopus has an energy level of 5, the bottom-right one has an energy level of 6, and so on.

You can model the energy levels and flashes of light in steps. During a single step, the following occurs:

* First, the energy level of each octopus increases by 1.
* Then, any octopus with an energy level greater than 9 flashes. This increases the energy level of all adjacent octopuses by 1, including octopuses that are diagonally adjacent. If this causes an octopus to have an energy level greater than 9, it also flashes. This process continues as long as new octopuses keep having their energy level increased beyond 9. (An octopus can only flash at most once per step.)
* Finally, any octopus that flashed during this step has its energy level set to 0, as it used all of its energy to flash.
* Adjacent flashes can cause an octopus to flash on a step even if it begins that step with very little energy. 
  Consider the middle octopus with 1 energy in this situation: **it works because of the initial +1 before the +8**

```elixir
ascii_zero = 48
flash_value = 40

display_grid = fn grid, text ->
  IO.puts("--- #{text}")

  0..grid.last_cell
  |> Enum.chunk_every(grid.grid_width)
  |> Enum.map(fn indexes ->
    indexes
    |> Enum.map(fn index -> (grid[index] >= flash_value && ".") || ascii_zero + grid[index] end)
    |> IO.puts()
  end)

  grid
end

increment_some = fn grid, to_increment, delta ->
  to_increment
  |> Enum.reduce(grid, fn index, acc ->
    {_, greater_grid} =
      acc
      |> Map.get_and_update(index, fn current_value ->
        {current_value, current_value + delta}
      end)

    greater_grid
  end)
end

increment = fn grid ->
  increment_some.(grid, 0..grid.last_cell, 1)
end

knock_down = fn grid ->
  0..grid.last_cell
  |> Enum.reduce(grid, fn index, acc ->
    {_, greater_grid} =
      Map.get_and_update(acc, index, fn current_value ->
        {current_value, (current_value > 9 && 0) || current_value}
      end)

    greater_grid
  end)
end

neighbors8 = fn grid, index ->
  x = rem(index, grid.grid_width)
  # only worry about going off the sides - the top and bottom
  # excursions will be off-board and removed when they return nil.
  positions =
    [
      index - grid.grid_width,
      index + grid.grid_width
    ] ++
      if x > 0 do
        [
          index - grid.grid_width - 1,
          index - 1,
          index + grid.grid_width - 1
        ]
      else
        []
      end ++
      if x == grid.grid_width - 1 do
        []
      else
        [
          index - grid.grid_width + 1,
          index + 1,
          index + grid.grid_width + 1
        ]
      end

  positions
  # off-board
  |> Enum.filter(fn neighbor -> grid[neighbor] end)

  # |> IO.inspect(label: "neighbors8 for #{index},#{grid.grid_width} (#{x})")
end

flashable = fn grid ->
  0..grid.last_cell
  |> Enum.filter(fn index -> grid[index] >= 10 && grid[index] < flash_value end)
end

flash_neighborhood = fn grid, flashable ->
  flashable
  |> Enum.reduce([], fn index, neighbors ->
    neighbors ++ neighbors8.(grid, index)
  end)
end

iterate = fn grid, num_flashes, iteration ->
  boosted =
    grid
    |> display_grid.("START iteration #{iteration} (#{num_flashes})")
    |> increment.()

  # |> display_grid.("boosted iteration #{iteration}")

  # hopefully each application will complete w/in 100 tries
  {new_grid, flash_count} =
    Enum.reduce_while(0..19, {boosted, num_flashes}, fn _n, {acc, flashes} ->
      # IO.puts("reduce_while(#{n}) iteration #{iteration}")
      flashable =
        acc
        |> flashable.()

      # |> IO.inspect(label: "flashable iteration #{iteration} (#{n})")
      flashes = flashes + Enum.count(flashable)

      neighbors =
        acc
        |> flash_neighborhood.(flashable)

      acc =
        acc
        |> increment_some.(neighbors, 1)
        |> increment_some.(flashable, flash_value)

      # |> display_grid.("post increment_some(#{Enum.count(neighbors)} neighbors)")

      {(flashable == [] && :halt) || :cont, {acc, flashes}}
      # |> IO.inspect(label: "while")
    end)

  new_grid =
    new_grid
    |> knock_down.()
    |> display_grid.("END iteration #{iteration}  (#{flash_count})")

  {new_grid, flash_count}
end

sample = "11111
19991
19191
19991
11111"

grid =
  p1data.()
  # sample
  |> AOC.as_grid_of_digits()

1..101
|> Enum.reduce({grid, 0}, fn iteration, {acc, flashes} ->
  iterate.(acc, flashes, iteration)
end)

:ok
# 4873
# |> score.()
```

## Part 2 (maybe solved above)

* Add part 2 puzzle instructions here

```elixir
score = fn map ->
  map
  |> Map.values()
  |> Enum.reject(fn count -> count < 2 end)
  |> Enum.count()
end

AOC.p1data()
# 4873
|> score.()
```

### Epilogue

This LiveBook lives at https://github.com/JohnB/2021adventOfCode/blob/main/2021adventOfCode/day08.livemd

In an effort to "show my work", here are my searches that helped solve the puzzle.
Some are very basic.

* blah blah
  [ginger]()
