<!-- vim: syntax=markdown -->

# Day 4

## Installation and Data

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Mix.install([
  {:kino, "~> 0.4.1"}
])

IEx.Helpers.c("lib/advent_of_code.ex")
alias AdventOfCode, as: AOC
alias Kino.Input
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_day = Kino.Input.number("Day")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1example = Kino.Input.textarea("Example Data")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_p1puzzleInput = Kino.Input.textarea("Puzzle Input")
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
input_source_select =
  Kino.Input.select("Source", [{:example, "example"}, {:puzzle_input, "puzzle input"}])
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
p1data = fn ->
  (Kino.Input.read(input_source_select) == :example &&
     Kino.Input.read(input_p1example)) ||
    Kino.Input.read(input_p1puzzleInput)
end
```

## Part 1

### Day 4: Giant Squid ---

You're already almost 1.5km (almost a mile) below the surface of the ocean, already so deep that you can't see any sunlight. What you can see, however, is a giant squid that has attached itself to the outside of your submarine.

Maybe it wants to play bingo?

Bingo is played on a set of boards each consisting of a 5x5 grid of numbers. Numbers are chosen at random, and the chosen number is marked on all boards on which it appears. (Numbers may not appear on all boards.) If all numbers in any row or any column of a board are marked, that board wins. (Diagonals don't count.)

The submarine has a bingo subsystem to help passengers (currently, you and the giant squid) pass the time. It automatically generates a random order in which to draw numbers and a random set of boards (your puzzle input). For example:

```
7,4,9,5,11,17,23,2,0,14,21,24,10,16,13,6,15,25,12,22,18,20,8,19,3,26,1

22 13 17 11  0
 8  2 23  4 24
21  9 14 16  7
 6 10  3 18  5
 1 12 20 15 19

 3 15  0  2 22
 9 18 13 17  5
19  8  7 25 23
20 11 10 24  4
14 21 16 12  6

14 21 17 24  4
10 16 15  9 19
18  8 23 26 20
22 11 13  6  5
 2  0 12  3  7
```

After the first five numbers are drawn (7, 4, 9, 5, and 11), there are no winners, but the boards are marked as follows (shown here adjacent to each other to save space):

```
22 13 17 11  0         3 15  0  2 22        14 21 17 24  4
 8  2 23  4 24         9 18 13 17  5        10 16 15  9 19
21  9 14 16  7        19  8  7 25 23        18  8 23 26 20
 6 10  3 18  5        20 11 10 24  4        22 11 13  6  5
 1 12 20 15 19        14 21 16 12  6         2  0 12  3  7
```

After the next six numbers are drawn (17, 23, 2, 0, 14, and 21), there are still no winners:

```
22 13 17 11  0         3 15  0  2 22        14 21 17 24  4
 8  2 23  4 24         9 18 13 17  5        10 16 15  9 19
21  9 14 16  7        19  8  7 25 23        18  8 23 26 20
 6 10  3 18  5        20 11 10 24  4        22 11 13  6  5
 1 12 20 15 19        14 21 16 12  6         2  0 12  3  7
```

Finally, 24 is drawn:

```
22 13 17 11  0         3 15  0  2 22        14 21 17 24  4
 8  2 23  4 24         9 18 13 17  5        10 16 15  9 19
21  9 14 16  7        19  8  7 25 23        18  8 23 26 20
 6 10  3 18  5        20 11 10 24  4        22 11 13  6  5
 1 12 20 15 19        14 21 16 12  6         2  0 12  3  7
```

At this point, the third board wins because it has at least one complete row or column of marked numbers (in this case, the entire top row is marked: 14 21 17 24 4).

The score of the winning board can now be calculated. Start by finding the sum of all unmarked numbers on that board; in this case, the sum is 188. Then, multiply that sum by the number that was just called when the board won, 24, to get the final score, 188 * 24 = 4512.

To guarantee victory against the giant squid, figure out which board will win first. What will your final score be if you choose that board?

```elixir
defmodule Day4Part1 do
  @marked "x"

  @win_positions [
    # across
    [0, 1, 2, 3, 4],
    [5, 6, 7, 8, 9],
    [10, 11, 12, 13, 14],
    [15, 16, 17, 18, 19],
    [20, 21, 22, 23, 24],
    # down
    [0, 5, 10, 15, 20],
    [1, 6, 11, 16, 21],
    [2, 7, 12, 17, 22],
    [3, 8, 13, 18, 23],
    [4, 9, 14, 19, 24]
    # (Diagonals don't count.)
  ]

  # text lines are converted to a 25-entry map
  def parse_board(board) do
    board
    |> String.trim()
    |> String.split(~r/\W/, trim: true)
    |> Enum.with_index()
    |> Enum.reduce(%{}, fn {n, idx}, acc ->
      Map.put(acc, "#{idx}", String.to_integer(n))
    end)
  end

  def mark_board(board, latest) do
    spot = Enum.find(board, fn {_k, v} -> v == latest end)

    case spot do
      nil ->
        board

      {k, _v} ->
        Map.put(board, k, @marked)
    end
  end

  def is_marked?(cell, board) do
    # IO.inspect([cell, board])
    board["#{cell}"] == @marked
  end

  def is_winner?(board) do
    @win_positions
    |> Enum.any?(fn win_position ->
      win_position
      |> Enum.all?(fn cell ->
        is_marked?(cell, board)
      end)
    end)
  end

  def search_for_win(_, boards) when length(boards) == 1 do
  end

  def search_for_win([], boards) do
    IO.inspect(boards, label: "ERROR: no winner found in all the draws")
  end

  # recurse through marking boards and checking for wins
  def search_for_win([latest | rest], boards) do
    marked =
      boards
      |> Enum.map(fn board -> mark_board(board, latest) end)

    # |> IO.inspect(label: "marked boards")

    winner =
      marked
      |> Enum.find(fn board -> is_winner?(board) end)

    case winner do
      nil ->
        search_for_win(rest, marked)

      _ ->
        {winner, latest}
    end
  end

  # recurse through marking boards and checking for wins
  def until_a_win([latest | rest], [board]) do
    marked = mark_board(board, latest)

    if is_winner?(marked) do
      {marked, latest}
    else
      until_a_win(rest, [marked])
    end
  end

  # recurse through marking boards and checking for wins
  def search_for_win2([latest | rest], boards) do
    marked =
      boards
      |> Enum.map(fn board -> mark_board(board, latest) end)

    # |> IO.inspect(label: "marked boards")

    losers =
      marked
      |> Enum.reject(fn board -> is_winner?(board) end)

    case Enum.count(losers) do
      0 ->
        {losers, latest}

      1 ->
        until_a_win(rest, losers)

      _ ->
        search_for_win2(rest, losers)
    end
  end

  def solve(text) do
    [draw | boards] =
      text
      |> AOC.as_doublespaced_paragraphs()

    boards =
      boards
      |> Enum.map(&parse_board/1)

    draw =
      draw
      |> String.split(~r/\W/, trim: true)
      |> Enum.map(&String.to_integer/1)

    {winner, latest} = search_for_win2(draw, boards)
    # |> IO.inspect(label: "winning board")

    score =
      winner
      |> Map.values()
      # |> IO.inspect(label: "values")
      |> Enum.reject(fn value -> value == @marked end)
      # |> IO.inspect(label: "unmarked")
      |> Enum.sum()

    # * latest

    IO.inspect([score, latest, score * latest, winner], label: "DONE")
    # score sum of non-"x" cells times the winning draw
  end
end

Day4Part1.solve(AOC.p1data())
```

## Part 2

On the other hand, it might be wise to try a different strategy: let the giant squid win.

You aren't sure how many bingo boards a giant squid could play at once, so rather than waste time counting its arms, the safe thing to do is to figure out which board will win last and choose that one. That way, no matter which boards it picks, it will win for sure.

In the above example, the second board is the last to win, which happens after 13 is eventually called and its middle column is completely marked. If you were to keep playing until this point, the second board would have a sum of unmarked numbers equal to 148 for a final score of 148 * 13 = 1924.

Figure out which board will win last. Once it wins, what would its final score be?

```elixir
defmodule Day4Part2 do
  def solve(text) do
    text
  end
end

Day4Part2.solve(AOC.p2orp1data())
```
