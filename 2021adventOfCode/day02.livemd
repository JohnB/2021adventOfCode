<!-- vim: syntax=markdown -->

# Day 2

## Installation and Data

<!-- livebook:{"livebook_object":"cell_input","name":"Day of Advent:","type":"number","value":"2"} -->

<!-- livebook:{"livebook_object":"cell_input","name":"Part 1 Example: ","type":"textarea","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"Part 1 Puzzle Input: ","type":"textarea","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"Part 2 Example: ","type":"textarea","value":""} -->

<!-- livebook:{"livebook_object":"cell_input","name":"Part 2 Puzzle Input: ","type":"textarea","value":""} -->

```elixir
Mix.install([
  {:kino, "~> 0.3.1"}
])

IEx.Helpers.c("lib/advent_of_code.ex")
alias AdventOfCode, as: AOC
AOC.link_to_day()
```

## Part 1

<!-- livebook:{"livebook_object":"cell_input","name":"Part 1 Input Data","props":{"options":["example","puzzle input"]},"type":"select","value":"example"} -->

```elixir
defmodule Part1 do
  def look_for_increase([a, b], acc) when b > a, do: acc + 1
  def look_for_increase(_, acc), do: acc

  def solve(text) do
    text
    |> AdventOfCode.as_single_lines()
    |> Enum.map(&String.to_integer/1)
    |> Enum.chunk_every(2, 1)
    |> IO.inspect(label: "1")
    |> Enum.reduce(0, &look_for_increase/2)
  end
end

Part1.solve(AOC.p1data())
```

## Part 2

<!-- livebook:{"livebook_object":"cell_input","name":"Part 2 Input Data","props":{"options":["example","puzzle input"]},"type":"select","value":"example"} -->

```elixir
defmodule Part2 do
  def look_for_increase([a, _b, _c, d], acc) when d > a, do: acc + 1
  def look_for_increase(_, acc), do: acc

  def solve(text) do
    text
    |> AdventOfCode.as_single_lines()
    |> Enum.map(&String.to_integer/1)
    |> Enum.chunk_every(4, 1)
    |> IO.inspect(label: "1")
    |> Enum.reduce(0, &look_for_increase/2)
  end
end

Part2.solve(AOC.p2data())
```
